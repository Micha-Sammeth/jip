apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'eclipse'

group = "jip"
version = "1.0-SNAPSHOT"
sourceCompatibility = 1.6
def outputName = "jip-${version}"

repositories {
    mavenCentral()
    maven {
        url "http://sammeth.net/artifactory/repo"
    }
}


dependencies{
	testCompile 'junit:junit-dep:4.10',
				'org.hamcrest:hamcrest-library:1.3.RC2',
				'org.hamcrest:hamcrest-core:1.3.RC2',
				'org.hamcrest:hamcrest-integration:1.3.RC2',
				'org.easymock:easymock:3.1'
    testRuntime 'org.slf4j:slf4j-simple:1.6.6'


    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.4'
    compile 'com.google.guava:guava:13.0'
    compile 'com.martiansoftware:jsap:2.1'
    compile 'org.slf4j:slf4j-api:1.6.6', 'org.slf4j:slf4j-log4j12:1.6.6','org.slf4j:jcl-over-slf4j:1.6.6','org.slf4j:jul-to-slf4j:1.6.6'
    compile 'log4j:log4j:1.2.16'
    compile project(":jip-plugin-system")
    compile project(":jip-graph")

}

// add tasks for source/javadoc and test jars and add them as artifacts
//apply from : "${rootDir}/gradle/javaproject.gradle"

test{
    jvmArgs '-Xms128m', '-Xmx1G'
    //makes the standard streams (err and out) visible at console when running tests
    //testLogging.showStandardStreams = true

    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
        ignoreFailures = true
    }
}

// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom tasks for creating javadoc jar
task javadocJar(type: Jar, dependsOn:"javadoc") {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task dist(dependsOn: ['jar', 'javadocJar', 'sourcesJar'])

configurations {
//    tests
    sjar
    jdoc
}

// add the jars as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
//    archives testJar
}


ext.distSpec = copySpec {
    from(project.rootDir){
        include 'LICENSE'
        include 'LGPL_LICENSE.txt'
        include 'APACHE_LICENSE.txt'
        include 'README.md'
    }
    into('bin') {
        from("${project.rootDir}/src/dist/bin")
        //filter(org.apache.tools.ant.filters.ReplaceTokens, tokens:[])
        rename 'jip.sh',  'jip'
        fileMode = 0755
    }
    into('lib') {
        from(jar.outputs.files)
        from(configurations.runtime)
    }
}

task distDir(type: Copy){
    description = "Prepare a directory for distribution"
    into "${distsDir}/${outputName}"
    with distSpec
}


task distTar(type: Tar) {
    description = "Tars the binary distribution."
    baseName "jip"
    into "${outputName}"
    with distSpec
    compression = Compression.GZIP
}




idea{
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}
