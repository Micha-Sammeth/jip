// custom tasks for creating source jar
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom tasks for creating javadoc jar
task javadocJar(type: Jar, dependsOn:"javadoc") {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// custom tasks for creating test jar
task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

/**
 * Write a properties file that contains version and build information
 */
task writeBuildProperties(){
    ext.bp = file("${sourceSets.main.output.resourcesDir.absolutePath}/${project.name}-build.properties")
    outputs.file file(bp)

    ext.props = [:]
    props["library.version"] = project(":").version
    props["build.version"] = project(":").gitVersion
    props["build.branch"] = project(":").gitBranch
    inputs.properties(props)

    doLast{
        if(!bp.exists()){
            bp.getParentFile().mkdirs();
            bp.createNewFile();
        }else{
            // delete old
            bp.delete()
            bp.createNewFile();
        }
        props["build.date"] = buildDate
        props.each{k,v->
            bp.append("${k}=${v}\n")
        }
    }
}
tasks.classes.dependsOn tasks.writeBuildProperties

task(versionInfo) << {
    description "Print version info"
    println "${project.name} Version info"
    println "Version:\t${version}"
    println "Build Date:\t${buildDate}"
    println "Build Version:\t${gitVersion}"
    println "Build Branch:\t${gitBranch}"
    println ""
}


configurations {
//    tests
    sjar
    jdoc
}

// add the jars as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
//    archives testJar
}

test{
    jvmArgs '-Xms128m', '-Xmx1G'
    //makes the standard streams (err and out) visible at console when running tests
    //testLogging.showStandardStreams = true

    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
        ignoreFailures = true
    }
}
